import { Chunk } from "../src/js/chunker.js";


beforeAll(function() {
    var temp = '<body> <div id="container"> <div><textarea id="textBox" rows="30" cols="200"></textarea></div><div><button id="convert">Convert</button></div><div><textarea id="resultBox" rows="30" cols="200"></textarea></div></div><script type="text/javascript" src="bundle.js"></script></body>';
    document.body.insertAdjacentHTML('afterbegin', temp);
});

jest.useFakeTimers();

test("startChunking()", () => {
    const chunkerObj = new Chunk("two 12th");
    expect(chunkerObj.text).toBe("two 12th");
    chunkerObj.startChunking();
    jest.runAllTimers();
    expect(document.getElementById("resultBox").value).toBe(" two twelveth");
});

test("startChunking()", () => {
    document.getElementById("resultBox").value = "";
    const chunkerObj = new Chunk("two There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():");
    expect(chunkerObj.text).toBe("two There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():");
    chunkerObj.startChunking();
    jest.runAllTimers();
    expect(document.getElementById("resultBox").value).toBe(" two There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something  like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():There are also scenarios where you might have a recursive timer -- that is a timer that sets a new timer in its own callback. For these, running all the timers would be an endless loop… so something like jest.runAllTimers() is not desirable. For these cases you might use jest.runOnlyPendingTimers():");
});